
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  000008c2  00000956  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000ba  008000ba  000009b0  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000009b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016e  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000028a  00000000  00000000  00001532  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000e5f  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005f1  00000000  00000000  0000261b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ffa  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001f0  00000000  00000000  00003c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000396  00000000  00000000  00003df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002e9  00000000  00000000  0000418e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000116  00000000  00000000  00004477  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3b       	cpi	r26, 0xBA	; 186
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa eb       	ldi	r26, 0xBA	; 186
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3c       	cpi	r26, 0xC9	; 201
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 5f 04 	jmp	0x8be	; 0x8be <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "micowave.h"
int main(void)
{
	// Start_Message();
	//Device_Drive();
    Starting_Program();
  92:	0e 94 40 03 	call	0x680	; 0x680 <Starting_Program>
	while(1)
    {
			
      	if (Sensors_Read())
  96:	0e 94 c9 01 	call	0x392	; 0x392 <Sensors_Read>
  9a:	88 23       	and	r24, r24
  9c:	31 f0       	breq	.+12     	; 0xaa <main+0x18>
			{
				TIMSK |=(1<<TOIE0);
  9e:	89 b7       	in	r24, 0x39	; 57
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	89 bf       	out	0x39, r24	; 57
				Turn_Output();
  a4:	0e 94 c1 01 	call	0x382	; 0x382 <Turn_Output>
  a8:	f6 cf       	rjmp	.-20     	; 0x96 <main+0x4>
			}
			else
			{
				TIMSK &=(~(1<<TOIE0));
  aa:	89 b7       	in	r24, 0x39	; 57
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	89 bf       	out	0x39, r24	; 57
				Stop_Output();
  b0:	0e 94 c5 01 	call	0x38a	; 0x38a <Stop_Output>

              Turn_Buz();
  b4:	0e 94 de 01 	call	0x3bc	; 0x3bc <Turn_Buz>
  b8:	ee cf       	rjmp	.-36     	; 0x96 <main+0x4>

000000ba <keyfind>:

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;            //set port direction as input-output
  ba:	40 ef       	ldi	r20, 0xF0	; 240
		KEY_PRT = 0xFF;         //ROW OUT HUGH AND COLLOUM INPUT PULLUP 
  bc:	3f ef       	ldi	r19, 0xFF	; 255
		_delay_ms (40);	            // 20 ms key debounce time
			colloc = (KEY_PIN & 0x0F);
		}while(colloc == 0x0F);   

		//	now check for rows
		KEY_PRT = 0xEF;             //check for pressed key in 1st row
  be:	2f ee       	ldi	r18, 0xEF	; 239
		{
			rowloc = 0;
			break;
		}

		KEY_PRT = 0xDF;		 //check for pressed key in 2nd row
  c0:	9f ed       	ldi	r25, 0xDF	; 223
		{
			rowloc = 1;
			break;
		}
		
		KEY_PRT = 0xBF;		 //check for pressed key in 3rd row
  c2:	6f eb       	ldi	r22, 0xBF	; 191
		{
			rowloc = 2;
			break;
		}

		KEY_PRT = 0x7F;		 //check for pressed key in 4th row
  c4:	5f e7       	ldi	r21, 0x7F	; 127

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;            //set port direction as input-output
  c6:	41 bb       	out	0x11, r20	; 17
		KEY_PRT = 0xFF;         //ROW OUT HUGH AND COLLOUM INPUT PULLUP 
  c8:	32 bb       	out	0x12, r19	; 18

		do
		{
				
			KEY_PRT &= 0x0F;      //  ROW OUT LOW // mask PORT for column read only
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	8f 70       	andi	r24, 0x0F	; 15
  ce:	82 bb       	out	0x12, r24	; 18
			asm("NOP");
  d0:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);//  read status of column
  d2:	80 b3       	in	r24, 0x10	; 16
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	80 93 c4 00 	sts	0x00C4, r24
		}while(colloc != 0x0F);
  da:	8f 30       	cpi	r24, 0x0F	; 15
  dc:	b1 f7       	brne	.-20     	; 0xca <keyfind+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	e7 e8       	ldi	r30, 0x87	; 135
  e0:	f3 e1       	ldi	r31, 0x13	; 19
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <keyfind+0x28>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <keyfind+0x2e>
  e8:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);            //  20ms key debounce time
				colloc = (KEY_PIN & 0x0F);  //read status of column
  ea:	80 b3       	in	r24, 0x10	; 16
  ec:	8f 70       	andi	r24, 0x0F	; 15
  ee:	80 93 c4 00 	sts	0x00C4, r24
			}while(colloc == 0x0F);         //check for any key press
  f2:	8f 30       	cpi	r24, 0x0F	; 15
  f4:	a1 f3       	breq	.-24     	; 0xde <keyfind+0x24>
  f6:	ef e0       	ldi	r30, 0x0F	; 15
  f8:	f7 e2       	ldi	r31, 0x27	; 39
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <keyfind+0x40>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <keyfind+0x46>
 100:	00 00       	nop
			
		_delay_ms (40);	            // 20 ms key debounce time
			colloc = (KEY_PIN & 0x0F);
 102:	80 b3       	in	r24, 0x10	; 16
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	80 93 c4 00 	sts	0x00C4, r24
		}while(colloc == 0x0F);   
 10a:	8f 30       	cpi	r24, 0x0F	; 15
 10c:	41 f3       	breq	.-48     	; 0xde <keyfind+0x24>

		//	now check for rows
		KEY_PRT = 0xEF;             //check for pressed key in 1st row
 10e:	22 bb       	out	0x12, r18	; 18
		asm("NOP");
 110:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 112:	80 b3       	in	r24, 0x10	; 16
 114:	8f 70       	andi	r24, 0x0F	; 15
 116:	80 93 c4 00 	sts	0x00C4, r24
		if(colloc != 0x0F)
 11a:	8f 30       	cpi	r24, 0x0F	; 15
 11c:	19 f0       	breq	.+6      	; 0x124 <keyfind+0x6a>
		{
			rowloc = 0;
 11e:	10 92 c5 00 	sts	0x00C5, r1
			break;
 122:	24 c0       	rjmp	.+72     	; 0x16c <keyfind+0xb2>
		}

		KEY_PRT = 0xDF;		 //check for pressed key in 2nd row
 124:	92 bb       	out	0x12, r25	; 18
		asm("NOP");
 126:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 128:	80 b3       	in	r24, 0x10	; 16
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	80 93 c4 00 	sts	0x00C4, r24
		if(colloc != 0x0F)
 130:	8f 30       	cpi	r24, 0x0F	; 15
 132:	21 f0       	breq	.+8      	; 0x13c <keyfind+0x82>
		{
			rowloc = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 c5 00 	sts	0x00C5, r24
			break;
 13a:	18 c0       	rjmp	.+48     	; 0x16c <keyfind+0xb2>
		}
		
		KEY_PRT = 0xBF;		 //check for pressed key in 3rd row
 13c:	62 bb       	out	0x12, r22	; 18
		asm("NOP");
 13e:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 140:	80 b3       	in	r24, 0x10	; 16
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	80 93 c4 00 	sts	0x00C4, r24
		if(colloc != 0x0F)
 148:	8f 30       	cpi	r24, 0x0F	; 15
 14a:	21 f0       	breq	.+8      	; 0x154 <keyfind+0x9a>
		{
			rowloc = 2;
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	80 93 c5 00 	sts	0x00C5, r24
			break;
 152:	0c c0       	rjmp	.+24     	; 0x16c <keyfind+0xb2>
		}

		KEY_PRT = 0x7F;		 //check for pressed key in 4th row
 154:	52 bb       	out	0x12, r21	; 18
		asm("NOP");
 156:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 158:	80 b3       	in	r24, 0x10	; 16
 15a:	8f 70       	andi	r24, 0x0F	; 15
 15c:	80 93 c4 00 	sts	0x00C4, r24
		if(colloc != 0x0F)
 160:	8f 30       	cpi	r24, 0x0F	; 15
 162:	09 f4       	brne	.+2      	; 0x166 <keyfind+0xac>
 164:	b0 cf       	rjmp	.-160    	; 0xc6 <keyfind+0xc>
		{
			rowloc = 3;
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	80 93 c5 00 	sts	0x00C5, r24
			break;
		}
	}

	if(colloc == 0x0E)
 16c:	80 91 c4 00 	lds	r24, 0x00C4
 170:	8e 30       	cpi	r24, 0x0E	; 14
 172:	59 f4       	brne	.+22     	; 0x18a <keyfind+0xd0>
	return(keypad[rowloc][0]);
 174:	e0 91 c5 00 	lds	r30, 0x00C5
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	e0 5a       	subi	r30, 0xA0	; 160
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	80 81       	ld	r24, Z
 188:	08 95       	ret
	else if(colloc == 0x0D)
 18a:	8d 30       	cpi	r24, 0x0D	; 13
 18c:	59 f4       	brne	.+22     	; 0x1a4 <keyfind+0xea>
	return(keypad[rowloc][1]);
 18e:	e0 91 c5 00 	lds	r30, 0x00C5
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	ee 0f       	add	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	e0 5a       	subi	r30, 0xA0	; 160
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	81 81       	ldd	r24, Z+1	; 0x01
 1a2:	08 95       	ret
	else if(colloc == 0x0B)
 1a4:	8b 30       	cpi	r24, 0x0B	; 11
 1a6:	59 f4       	brne	.+22     	; 0x1be <keyfind+0x104>
	return(keypad[rowloc][2]);
 1a8:	e0 91 c5 00 	lds	r30, 0x00C5
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	ee 0f       	add	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	e0 5a       	subi	r30, 0xA0	; 160
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	82 81       	ldd	r24, Z+2	; 0x02
 1bc:	08 95       	ret
	else
	return(keypad[rowloc][3]);
 1be:	e0 91 c5 00 	lds	r30, 0x00C5
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	ee 0f       	add	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	e0 5a       	subi	r30, 0xA0	; 160
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	83 81       	ldd	r24, Z+3	; 0x03
}
 1d2:	08 95       	ret

000001d4 <HI_LO_PULS_EN>:
	HI_LO_PULS_EN();
}

void HI_LO_PULS_EN(void)
{
	CONTRLO_PINS_HI_LO|=(1<<ENABLE);
 1d4:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	00 00       	nop
	_delay_us(1);
	CONTRLO_PINS_HI_LO&=~(1<<ENABLE);
 1d8:	c1 98       	cbi	0x18, 1	; 24
 1da:	81 e2       	ldi	r24, 0x21	; 33
 1dc:	8a 95       	dec	r24
 1de:	f1 f7       	brne	.-4      	; 0x1dc <HI_LO_PULS_EN+0x8>
 1e0:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	83 ed       	ldi	r24, 0xD3	; 211
 1e4:	90 e3       	ldi	r25, 0x30	; 48
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <HI_LO_PULS_EN+0x12>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <HI_LO_PULS_EN+0x18>
 1ec:	00 00       	nop
	_delay_us(100);
	_delay_ms(50);
}
 1ee:	08 95       	ret

000001f0 <SEND_COMND>:

}

void SEND_COMND(unsigned char CMD)
{
	CONTRLO_PINS_HI_LO&=~((1<<RE_WR)|(1<<REG_SEL)) ;
 1f0:	98 b3       	in	r25, 0x18	; 24
 1f2:	93 7f       	andi	r25, 0xF3	; 243
 1f4:	98 bb       	out	0x18, r25	; 24
	DATE_HI_LO=CMD;
 1f6:	8b bb       	out	0x1b, r24	; 27
	HI_LO_PULS_EN();
 1f8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <HI_LO_PULS_EN>
}
 1fc:	08 95       	ret

000001fe <LCD_INISTIALIZATION>:
 */ 
#include "lcd.h"

void LCD_INISTIALIZATION(void)
{
	DATE_IN_OUT =0xFF;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	8a bb       	out	0x1a, r24	; 26
	CONTRLO_PINS_IN_OUT|=((1<<ENABLE)|(1<<RE_WR)|(1<<REG_SEL));
 202:	87 b3       	in	r24, 0x17	; 23
 204:	8e 60       	ori	r24, 0x0E	; 14
 206:	87 bb       	out	0x17, r24	; 23
 208:	87 e8       	ldi	r24, 0x87	; 135
 20a:	93 e1       	ldi	r25, 0x13	; 19
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <LCD_INISTIALIZATION+0xe>
 210:	00 c0       	rjmp	.+0      	; 0x212 <LCD_INISTIALIZATION+0x14>
 212:	00 00       	nop
	//CONTRLO_PINS_HI_LO&=~(1<<ENABLE);
	
	_delay_ms(20);       //wait for start initialization
	SEND_COMND(0x38);   //8bit mode
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SEND_COMND>
	SEND_COMND(0x0E);   //curser not be blinking
 21a:	8e e0       	ldi	r24, 0x0E	; 14
 21c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SEND_COMND>
	SEND_COMND(0x01);   // clear display
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SEND_COMND>
 226:	83 ef       	ldi	r24, 0xF3	; 243
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_INISTIALIZATION+0x2c>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_INISTIALIZATION+0x32>
 230:	00 00       	nop
	_delay_ms(2);
	SEND_COMND(0x06);   //INCREAMENT CURSOR TO RIGHT
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SEND_COMND>

}
 238:	08 95       	ret

0000023a <SEND_DATE>:
	_delay_ms(50);
}

void SEND_DATE(unsigned char DATE)
{
	CONTRLO_PINS_HI_LO &=~(1<<RE_WR);
 23a:	c2 98       	cbi	0x18, 2	; 24
	CONTRLO_PINS_HI_LO |=(1<<REG_SEL);
 23c:	c3 9a       	sbi	0x18, 3	; 24
	DATE_HI_LO=DATE;
 23e:	8b bb       	out	0x1b, r24	; 27
	HI_LO_PULS_EN();
 240:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <HI_LO_PULS_EN>
}
 244:	08 95       	ret

00000246 <SEND_STRING>:
void SEND_STRING(unsigned char *STR)
{
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	ec 01       	movw	r28, r24
	while(*STR>0)
 24c:	88 81       	ld	r24, Y
 24e:	88 23       	and	r24, r24
 250:	31 f0       	breq	.+12     	; 0x25e <SEND_STRING+0x18>
	CONTRLO_PINS_HI_LO &=~(1<<RE_WR);
	CONTRLO_PINS_HI_LO |=(1<<REG_SEL);
	DATE_HI_LO=DATE;
	HI_LO_PULS_EN();
}
void SEND_STRING(unsigned char *STR)
 252:	21 96       	adiw	r28, 0x01	; 1
{
	while(*STR>0)
	{
		
		SEND_DATE(*STR++);  //first send and then increament
 254:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
	DATE_HI_LO=DATE;
	HI_LO_PULS_EN();
}
void SEND_STRING(unsigned char *STR)
{
	while(*STR>0)
 258:	89 91       	ld	r24, Y+
 25a:	88 23       	and	r24, r24
 25c:	d9 f7       	brne	.-10     	; 0x254 <SEND_STRING+0xe>
	{
		
		SEND_DATE(*STR++);  //first send and then increament
		
	}
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <GO_LOC>:
char ARR_LOC_ROWS[]={0x80,0xC0,0x94,0xD4};
void GO_LOC(uint8_t x,uint8_t y)
{
	//char ARR_LOC_ROWS[]={0x80,0xC0,0x94,0xD4};
	
	SEND_COMND(ARR_LOC_ROWS[x-1]+(y-1));
 264:	61 50       	subi	r22, 0x01	; 1
 266:	e8 2f       	mov	r30, r24
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	e1 59       	subi	r30, 0x91	; 145
 26c:	ff 4f       	sbci	r31, 0xFF	; 255
 26e:	80 81       	ld	r24, Z
 270:	86 0f       	add	r24, r22
 272:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SEND_COMND>
}
 276:	08 95       	ret

00000278 <SEND_LONG_NUM>:

void SEND_LONG_NUM(char *p,int siz)
{
 278:	cf 92       	push	r12
 27a:	df 92       	push	r13
 27c:	ef 92       	push	r14
 27e:	ff 92       	push	r15
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	8c 01       	movw	r16, r24
 28a:	6b 01       	movw	r12, r22
	static char NUM_ST[4];
	for (int i=0;i<siz;i++)
 28c:	16 16       	cp	r1, r22
 28e:	17 06       	cpc	r1, r23
 290:	c4 f4       	brge	.+48     	; 0x2c2 <SEND_LONG_NUM+0x4a>
 292:	c0 e0       	ldi	r28, 0x00	; 0
 294:	d0 e0       	ldi	r29, 0x00	; 0
	{
		itoa(*p,NUM_ST,10);
 296:	0f 2e       	mov	r0, r31
 298:	fa eb       	ldi	r31, 0xBA	; 186
 29a:	ef 2e       	mov	r14, r31
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	ff 2e       	mov	r15, r31
 2a0:	f0 2d       	mov	r31, r0
 2a2:	f8 01       	movw	r30, r16
 2a4:	81 91       	ld	r24, Z+
 2a6:	8f 01       	movw	r16, r30
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	b7 01       	movw	r22, r14
 2ac:	4a e0       	ldi	r20, 0x0A	; 10
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	0e 94 2e 04 	call	0x85c	; 0x85c <itoa>
		SEND_STRING(NUM_ST);
 2b4:	c7 01       	movw	r24, r14
 2b6:	0e 94 23 01 	call	0x246	; 0x246 <SEND_STRING>
}

void SEND_LONG_NUM(char *p,int siz)
{
	static char NUM_ST[4];
	for (int i=0;i<siz;i++)
 2ba:	21 96       	adiw	r28, 0x01	; 1
 2bc:	cc 15       	cp	r28, r12
 2be:	dd 05       	cpc	r29, r13
 2c0:	84 f3       	brlt	.-32     	; 0x2a2 <SEND_LONG_NUM+0x2a>
		SEND_STRING(NUM_ST);
		p++;
		//itoa(*p,NUM_ST,10);
		//	SEND_STRING(NUM_ST);
	}
	int sift=(20+(20-siz)/2);
 2c2:	c4 e1       	ldi	r28, 0x14	; 20
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
 2c6:	cc 19       	sub	r28, r12
 2c8:	dd 09       	sbc	r29, r13
 2ca:	0a f4       	brpl	.+2      	; 0x2ce <SEND_LONG_NUM+0x56>
 2cc:	21 96       	adiw	r28, 0x01	; 1
 2ce:	d5 95       	asr	r29
 2d0:	c7 95       	ror	r28
 2d2:	64 96       	adiw	r28, 0x14	; 20
	for (int i=0;i<sift;i++)
 2d4:	1c 16       	cp	r1, r28
 2d6:	1d 06       	cpc	r1, r29
 2d8:	54 f4       	brge	.+20     	; 0x2ee <SEND_LONG_NUM+0x76>
 2da:	00 e0       	ldi	r16, 0x00	; 0
 2dc:	10 e0       	ldi	r17, 0x00	; 0
	{
		SEND_COMND(0x1C);
 2de:	8c e1       	ldi	r24, 0x1C	; 28
 2e0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SEND_COMND>
		p++;
		//itoa(*p,NUM_ST,10);
		//	SEND_STRING(NUM_ST);
	}
	int sift=(20+(20-siz)/2);
	for (int i=0;i<sift;i++)
 2e4:	0f 5f       	subi	r16, 0xFF	; 255
 2e6:	1f 4f       	sbci	r17, 0xFF	; 255
 2e8:	0c 17       	cp	r16, r28
 2ea:	1d 07       	cpc	r17, r29
 2ec:	c4 f3       	brlt	.-16     	; 0x2de <SEND_LONG_NUM+0x66>
	{
		SEND_COMND(0x1C);
	}
	
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	ff 90       	pop	r15
 2f8:	ef 90       	pop	r14
 2fa:	df 90       	pop	r13
 2fc:	cf 90       	pop	r12
 2fe:	08 95       	ret

00000300 <OUTPUT_MODE>:

#include "microconf.h"

void OUTPUT_MODE(volatile uint8 *DIR_ADRESSS,volatile uint8 *INPUT_TRISTATE_ADRESS,uint8 PIN_NO,IO_MODE PIN_MODE)

{
 300:	fc 01       	movw	r30, r24
 302:	db 01       	movw	r26, r22
	SET_BIT(*DIR_ADRESSS,PIN_NO);
 304:	30 81       	ld	r19, Z
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	bc 01       	movw	r22, r24
 30c:	02 c0       	rjmp	.+4      	; 0x312 <OUTPUT_MODE+0x12>
 30e:	66 0f       	add	r22, r22
 310:	77 1f       	adc	r23, r23
 312:	4a 95       	dec	r20
 314:	e2 f7       	brpl	.-8      	; 0x30e <OUTPUT_MODE+0xe>
 316:	ab 01       	movw	r20, r22
 318:	86 2f       	mov	r24, r22
 31a:	83 2b       	or	r24, r19
 31c:	80 83       	st	Z, r24
	
	switch (PIN_MODE)
 31e:	22 23       	and	r18, r18
 320:	39 f0       	breq	.+14     	; 0x330 <OUTPUT_MODE+0x30>
 322:	21 30       	cpi	r18, 0x01	; 1
 324:	41 f4       	brne	.+16     	; 0x336 <OUTPUT_MODE+0x36>
	{
			case INPUT_FLOAT:
			CLEAR_BIT(*INPUT_TRISTATE_ADRESS,PIN_NO);
 326:	8c 91       	ld	r24, X
 328:	40 95       	com	r20
 32a:	48 23       	and	r20, r24
 32c:	4c 93       	st	X, r20
			break;
 32e:	08 95       	ret
			
			case INPUT_PULLUP:
			SET_BIT(*INPUT_TRISTATE_ADRESS,PIN_NO);
 330:	8c 91       	ld	r24, X
 332:	48 2b       	or	r20, r24
 334:	4c 93       	st	X, r20
 336:	08 95       	ret

00000338 <INPUT_MODE>:



void INPUT_MODE(volatile uint8 *DIR_ADRESSS,volatile uint8 *OUT_FLOATORPULL_ADRESS,uint8 PIN_NO,IO_MODE PIN_MODE)

{
 338:	fc 01       	movw	r30, r24
 33a:	db 01       	movw	r26, r22
	CLEAR_BIT(*DIR_ADRESSS,PIN_NO);
 33c:	30 81       	ld	r19, Z
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	bc 01       	movw	r22, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <INPUT_MODE+0x12>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	4a 95       	dec	r20
 34c:	e2 f7       	brpl	.-8      	; 0x346 <INPUT_MODE+0xe>
 34e:	ab 01       	movw	r20, r22
 350:	86 2f       	mov	r24, r22
 352:	80 95       	com	r24
 354:	98 2f       	mov	r25, r24
 356:	93 23       	and	r25, r19
 358:	90 83       	st	Z, r25
	
	switch(PIN_MODE)
 35a:	22 30       	cpi	r18, 0x02	; 2
 35c:	31 f0       	breq	.+12     	; 0x36a <INPUT_MODE+0x32>
 35e:	23 30       	cpi	r18, 0x03	; 3
 360:	39 f4       	brne	.+14     	; 0x370 <INPUT_MODE+0x38>
{
	
	case OUTPUT_BLOCK:
	SET_BIT(*OUT_FLOATORPULL_ADRESS,PIN_NO);
 362:	8c 91       	ld	r24, X
 364:	48 2b       	or	r20, r24
 366:	4c 93       	st	X, r20
	break;
 368:	08 95       	ret
	
	case OUTPUT_PASS:
	CLEAR_BIT(*OUT_FLOATORPULL_ADRESS,PIN_NO);
 36a:	9c 91       	ld	r25, X
 36c:	89 23       	and	r24, r25
 36e:	8c 93       	st	X, r24
 370:	08 95       	ret

00000372 <Device_Drive>:
volatile  uint8_t flag=1;
volatile  uint8_t flag2=0;
void Device_Drive(void)
{
	//define inputs
	DDRC &=(~(1<<Door_Sen));
 372:	a0 98       	cbi	0x14, 0	; 20
	DDRC &=(~(1<<Weight_Sen));
 374:	a1 98       	cbi	0x14, 1	; 20
	DDRC &=(~(1<<Cancal_Sw));
 376:	a2 98       	cbi	0x14, 2	; 20
	//define output
	DDRC|=(1<<Motor);
 378:	a3 9a       	sbi	0x14, 3	; 20
	DDRC|=(1<<Heater);
 37a:	a4 9a       	sbi	0x14, 4	; 20
	DDRC|=(1<<Lamp);
 37c:	a5 9a       	sbi	0x14, 5	; 20
	DDRC|=(1<<Buz);
 37e:	a6 9a       	sbi	0x14, 6	; 20
}
 380:	08 95       	ret

00000382 <Turn_Output>:
void Turn_Output(void)
{
	PORTC|=(1<<Motor);
 382:	ab 9a       	sbi	0x15, 3	; 21
	PORTC|=(1<<Heater);
 384:	ac 9a       	sbi	0x15, 4	; 21
	PORTC|=(1<<Lamp);
 386:	ad 9a       	sbi	0x15, 5	; 21
}
 388:	08 95       	ret

0000038a <Stop_Output>:
void Stop_Output(void)
{
	PORTC &=(~(1<<Motor));
 38a:	ab 98       	cbi	0x15, 3	; 21
	PORTC &=(~(1<<Heater));
 38c:	ac 98       	cbi	0x15, 4	; 21
	PORTC &=(~(1<<Lamp));
 38e:	ad 98       	cbi	0x15, 5	; 21

}
 390:	08 95       	ret

00000392 <Sensors_Read>:

uint8_t Sensors_Read(void)
{
	if (IS_BIT_SET(PORTC_INPUTREAD,Door_Sen) && IS_BIT_SET(PORTC_INPUTREAD,Weight_Sen)&&IS_BIT_SET(PORTC_INPUTREAD,Cancal_Sw)&&(flag==1))
 392:	98 9b       	sbis	0x13, 0	; 19
 394:	0b c0       	rjmp	.+22     	; 0x3ac <Sensors_Read+0x1a>
 396:	99 9b       	sbis	0x13, 1	; 19
 398:	0b c0       	rjmp	.+22     	; 0x3b0 <Sensors_Read+0x1e>
 39a:	9a 9b       	sbis	0x13, 2	; 19
 39c:	0b c0       	rjmp	.+22     	; 0x3b4 <Sensors_Read+0x22>
 39e:	80 91 b9 00 	lds	r24, 0x00B9
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	49 f4       	brne	.+18     	; 0x3b8 <Sensors_Read+0x26>
	{
		flag2=1;
 3a6:	80 93 c2 00 	sts	0x00C2, r24
		return 1;
 3aa:	08 95       	ret
	}
	else
	{

		return 0;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	08 95       	ret
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	08 95       	ret
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	08 95       	ret
 3b8:	80 e0       	ldi	r24, 0x00	; 0

		
	}
}
 3ba:	08 95       	ret

000003bc <Turn_Buz>:
void Turn_Buz(void)
{
					if (flag2==1)
 3bc:	80 91 c2 00 	lds	r24, 0x00C2
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	51 f4       	brne	.+20     	; 0x3d8 <Turn_Buz+0x1c>
				{
	  			    Buzzer_On;
 3c4:	ae 9a       	sbi	0x15, 6	; 21
 3c6:	8f e4       	ldi	r24, 0x4F	; 79
 3c8:	93 ec       	ldi	r25, 0xC3	; 195
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <Turn_Buz+0xe>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <Turn_Buz+0x14>
 3d0:	00 00       	nop
                   _delay_ms(200);
	             	Buzzer_Off;
 3d2:	ae 98       	cbi	0x15, 6	; 21
				   flag2=0; 
 3d4:	10 92 c2 00 	sts	0x00C2, r1
 3d8:	08 95       	ret

000003da <Start_Message>:
	Entering_Time();
	Timer0_Intialization();
}

void Start_Message(void)
{   
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
	LCD_INISTIALIZATION();
 3de:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_INISTIALIZATION>
	GO_LOC(2,1);
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	0e 94 32 01 	call	0x264	; 0x264 <GO_LOC>
	SEND_STRING("wellcome");
 3ea:	84 e7       	ldi	r24, 0x74	; 116
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 23 01 	call	0x246	; 0x246 <SEND_STRING>
	for (int j=0;j<=5;j++)
 3f2:	c0 e0       	ldi	r28, 0x00	; 0
 3f4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		SEND_COMND(0x1C);
 3f6:	8c e1       	ldi	r24, 0x1C	; 28
 3f8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SEND_COMND>
 3fc:	8b e4       	ldi	r24, 0x4B	; 75
 3fe:	9d e1       	ldi	r25, 0x1D	; 29
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <Start_Message+0x26>
 404:	00 c0       	rjmp	.+0      	; 0x406 <Start_Message+0x2c>
 406:	00 00       	nop
void Start_Message(void)
{   
	LCD_INISTIALIZATION();
	GO_LOC(2,1);
	SEND_STRING("wellcome");
	for (int j=0;j<=5;j++)
 408:	21 96       	adiw	r28, 0x01	; 1
 40a:	c6 30       	cpi	r28, 0x06	; 6
 40c:	d1 05       	cpc	r29, r1
 40e:	99 f7       	brne	.-26     	; 0x3f6 <Start_Message+0x1c>
 410:	8f e9       	ldi	r24, 0x9F	; 159
 412:	96 e8       	ldi	r25, 0x86	; 134
 414:	a1 e0       	ldi	r26, 0x01	; 1
 416:	81 50       	subi	r24, 0x01	; 1
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	a0 40       	sbci	r26, 0x00	; 0
 41c:	e1 f7       	brne	.-8      	; 0x416 <Start_Message+0x3c>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <Start_Message+0x46>
 420:	00 00       	nop
	{
		SEND_COMND(0x1C);
		_delay_ms(30); 
	}
	_delay_ms(500);
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SEND_COMND>
	SEND_STRING("timer");
 428:	8d e7       	ldi	r24, 0x7D	; 125
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 23 01 	call	0x246	; 0x246 <SEND_STRING>
    SEND_STRING(" 00:00 ");
 430:	83 e8       	ldi	r24, 0x83	; 131
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 23 01 	call	0x246	; 0x246 <SEND_STRING>
	
	GO_LOC(1,7);
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	67 e0       	ldi	r22, 0x07	; 7
 43c:	0e 94 32 01 	call	0x264	; 0x264 <GO_LOC>
	////////////////////////////
	

}
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <Create_Timing>:
void Create_Timing(void)
{
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SEND_COMND>
    GO_LOC(1,1);
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	0e 94 32 01 	call	0x264	; 0x264 <GO_LOC>
	SEND_DATE('0');
 454:	80 e3       	ldi	r24, 0x30	; 48
 456:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
	SEND_DATE('0');
 45a:	80 e3       	ldi	r24, 0x30	; 48
 45c:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
	SEND_DATE(':');
 460:	8a e3       	ldi	r24, 0x3A	; 58
 462:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
	SEND_DATE('0');
 466:	80 e3       	ldi	r24, 0x30	; 48
 468:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
	SEND_DATE('0');
 46c:	80 e3       	ldi	r24, 0x30	; 48
 46e:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
	SEND_DATE(':');
 472:	8a e3       	ldi	r24, 0x3A	; 58
 474:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
}
 478:	08 95       	ret

0000047a <Reset_time>:
}
*/
}
void Reset_time(void)
{  
	t=0;
 47a:	10 92 c3 00 	sts	0x00C3, r1
	 Buzzer_On;
 47e:	ae 9a       	sbi	0x15, 6	; 21
 480:	8f e4       	ldi	r24, 0x4F	; 79
 482:	93 ec       	ldi	r25, 0xC3	; 195
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <Reset_time+0xa>
 488:	00 c0       	rjmp	.+0      	; 0x48a <Reset_time+0x10>
 48a:	00 00       	nop
  _delay_ms(200);
  Buzzer_Off;
 48c:	ae 98       	cbi	0x15, 6	; 21
	GO_LOC(2,3);
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	63 e0       	ldi	r22, 0x03	; 3
 492:	0e 94 32 01 	call	0x264	; 0x264 <GO_LOC>
	SEND_STRING("timer canseled");
 496:	8b e8       	ldi	r24, 0x8B	; 139
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 23 01 	call	0x246	; 0x246 <SEND_STRING>
 49e:	8f e9       	ldi	r24, 0x9F	; 159
 4a0:	96 e8       	ldi	r25, 0x86	; 134
 4a2:	a1 e0       	ldi	r26, 0x01	; 1
 4a4:	81 50       	subi	r24, 0x01	; 1
 4a6:	90 40       	sbci	r25, 0x00	; 0
 4a8:	a0 40       	sbci	r26, 0x00	; 0
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <Reset_time+0x2a>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <Reset_time+0x34>
 4ae:	00 00       	nop
    _delay_ms(500);
	SEND_COMND(0x01); //clear lcd and curser goto loc(1.1) automatically
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SEND_COMND>
	SEND_STRING("timer");
 4b6:	8d e7       	ldi	r24, 0x7D	; 125
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 23 01 	call	0x246	; 0x246 <SEND_STRING>
	//GO_LOC(1,6);
	SEND_STRING(" 00:00 ");
 4be:	83 e8       	ldi	r24, 0x83	; 131
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 23 01 	call	0x246	; 0x246 <SEND_STRING>
	Arr_Time[0]=0;
 4c6:	10 92 be 00 	sts	0x00BE, r1
	Arr_Time[1]=0;
 4ca:	10 92 bf 00 	sts	0x00BF, r1
	Arr_Time[2]=0;
 4ce:	10 92 c0 00 	sts	0x00C0, r1
	Arr_Time[3]=0;
 4d2:	10 92 c1 00 	sts	0x00C1, r1
	GO_LOC(1,7);
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	67 e0       	ldi	r22, 0x07	; 7
 4da:	0e 94 32 01 	call	0x264	; 0x264 <GO_LOC>
}
 4de:	08 95       	ret

000004e0 <Entering_Time>:
	   SEND_DATE(' ');
   }
}*/	

void Entering_Time(void)
{
 4e0:	6f 92       	push	r6
 4e2:	7f 92       	push	r7
 4e4:	8f 92       	push	r8
 4e6:	9f 92       	push	r9
 4e8:	af 92       	push	r10
 4ea:	bf 92       	push	r11
 4ec:	cf 92       	push	r12
 4ee:	df 92       	push	r13
 4f0:	ef 92       	push	r14
 4f2:	ff 92       	push	r15
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
	             GO_LOC(1,10);
               }
		    if ((t==4)&&(keyfind()=='='))
		        {
					jump:
				  t=4;    //to avoid receving again from key pad and char('*')will affect 
 4fc:	66 24       	eor	r6, r6
 4fe:	68 94       	set
 500:	62 f8       	bld	r6, 2
				  Num_Total_Sec=(Arr_Time[0] *10*60)+(Arr_Time[1] * 60)+(Arr_Time[2] * 10)+(Arr_Time[3] *1);
 502:	ce eb       	ldi	r28, 0xBE	; 190
 504:	d0 e0       	ldi	r29, 0x00	; 0
 506:	0f 2e       	mov	r0, r31
 508:	f8 e5       	ldi	r31, 0x58	; 88
 50a:	af 2e       	mov	r10, r31
 50c:	f2 e0       	ldi	r31, 0x02	; 2
 50e:	bf 2e       	mov	r11, r31
 510:	f0 2d       	mov	r31, r0
 512:	8e 01       	movw	r16, r28
 514:	0f 5f       	subi	r16, 0xFF	; 255
 516:	1f 4f       	sbci	r17, 0xFF	; 255
 518:	0f 2e       	mov	r0, r31
 51a:	f3 e0       	ldi	r31, 0x03	; 3
 51c:	ef 2e       	mov	r14, r31
 51e:	ff 24       	eor	r15, r15
 520:	f0 2d       	mov	r31, r0
 522:	ec 0e       	add	r14, r28
 524:	fd 1e       	adc	r15, r29
 526:	cc 24       	eor	r12, r12
 528:	dd 24       	eor	r13, r13
 52a:	68 94       	set
 52c:	c1 f8       	bld	r12, 1
 52e:	cc 0e       	add	r12, r28
 530:	dd 1e       	adc	r13, r29
 532:	0f 2e       	mov	r0, r31
 534:	fa e0       	ldi	r31, 0x0A	; 10
 536:	7f 2e       	mov	r7, r31
 538:	f0 2d       	mov	r31, r0
				  Buzzer_On;
				  _delay_ms(200);
				  Buzzer_Off;
			      GO_LOC(2,1);
		          SEND_STRING("wait  ");
 53a:	0f 2e       	mov	r0, r31
 53c:	fa e9       	ldi	r31, 0x9A	; 154
 53e:	8f 2e       	mov	r8, r31
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	9f 2e       	mov	r9, r31
 544:	f0 2d       	mov	r31, r0
{
//Date=keyfind();
//if((Date != '='))
//int n=5;
//if(n>1)
while(finish==1)
 546:	86 c0       	rjmp	.+268    	; 0x654 <Entering_Time+0x174>
	{
		//jump:
	// Reset_time();
		if (t<4)
 548:	94 30       	cpi	r25, 0x04	; 4
 54a:	08 f0       	brcs	.+2      	; 0x54e <Entering_Time+0x6e>
 54c:	85 c0       	rjmp	.+266    	; 0x658 <Entering_Time+0x178>
	    {
	    Date=keyfind();
 54e:	0e 94 5d 00 	call	0xba	; 0xba <keyfind>
 552:	80 93 c6 00 	sts	0x00C6, r24
		       if (Date=='*')
 556:	80 91 c6 00 	lds	r24, 0x00C6
 55a:	8a 32       	cpi	r24, 0x2A	; 42
 55c:	19 f4       	brne	.+6      	; 0x564 <Entering_Time+0x84>
		       {
				   Reset_time();
 55e:	0e 94 3d 02 	call	0x47a	; 0x47a <Reset_time>
 562:	78 c0       	rjmp	.+240    	; 0x654 <Entering_Time+0x174>
				// goto jump;
		       }
	  else if (t==0  && (Date == '='))
 564:	80 91 c3 00 	lds	r24, 0x00C3
 568:	88 23       	and	r24, r24
 56a:	29 f4       	brne	.+10     	; 0x576 <Entering_Time+0x96>
 56c:	80 91 c6 00 	lds	r24, 0x00C6
 570:	8d 33       	cpi	r24, 0x3D	; 61
 572:	09 f4       	brne	.+2      	; 0x576 <Entering_Time+0x96>
 574:	6f c0       	rjmp	.+222    	; 0x654 <Entering_Time+0x174>
		       
			   else
		 {
			
	   
		    if ((Date == '='))
 576:	80 91 c6 00 	lds	r24, 0x00C6
 57a:	8d 33       	cpi	r24, 0x3D	; 61
 57c:	09 f1       	breq	.+66     	; 0x5c0 <Entering_Time+0xe0>
		       {
				  goto jump;
			   }
		     SEND_DATE(Date);
 57e:	80 91 c6 00 	lds	r24, 0x00C6
 582:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
        Arr_Time[t++]=(Date-48);
 586:	80 91 c3 00 	lds	r24, 0x00C3
 58a:	90 91 c6 00 	lds	r25, 0x00C6
 58e:	e8 2f       	mov	r30, r24
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	e2 54       	subi	r30, 0x42	; 66
 594:	ff 4f       	sbci	r31, 0xFF	; 255
 596:	90 53       	subi	r25, 0x30	; 48
 598:	90 83       	st	Z, r25
 59a:	8f 5f       	subi	r24, 0xFF	; 255
 59c:	80 93 c3 00 	sts	0x00C3, r24
           if(t==2)
 5a0:	82 30       	cpi	r24, 0x02	; 2
 5a2:	21 f4       	brne	.+8      	; 0x5ac <Entering_Time+0xcc>
               {
	             GO_LOC(1,10);
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	67 2d       	mov	r22, r7
 5a8:	0e 94 32 01 	call	0x264	; 0x264 <GO_LOC>
               }
		    if ((t==4)&&(keyfind()=='='))
 5ac:	80 91 c3 00 	lds	r24, 0x00C3
 5b0:	84 30       	cpi	r24, 0x04	; 4
 5b2:	09 f0       	breq	.+2      	; 0x5b6 <Entering_Time+0xd6>
 5b4:	4f c0       	rjmp	.+158    	; 0x654 <Entering_Time+0x174>
 5b6:	0e 94 5d 00 	call	0xba	; 0xba <keyfind>
 5ba:	8d 33       	cpi	r24, 0x3D	; 61
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <Entering_Time+0xe0>
 5be:	4a c0       	rjmp	.+148    	; 0x654 <Entering_Time+0x174>
		        {
					jump:
				  t=4;    //to avoid receving again from key pad and char('*')will affect 
 5c0:	60 92 c3 00 	sts	0x00C3, r6
				  Num_Total_Sec=(Arr_Time[0] *10*60)+(Arr_Time[1] * 60)+(Arr_Time[2] * 10)+(Arr_Time[3] *1);
 5c4:	88 81       	ld	r24, Y
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	8a 9d       	mul	r24, r10
 5ca:	90 01       	movw	r18, r0
 5cc:	8b 9d       	mul	r24, r11
 5ce:	30 0d       	add	r19, r0
 5d0:	9a 9d       	mul	r25, r10
 5d2:	30 0d       	add	r19, r0
 5d4:	11 24       	eor	r1, r1
 5d6:	f8 01       	movw	r30, r16
 5d8:	80 81       	ld	r24, Z
 5da:	fc e3       	ldi	r31, 0x3C	; 60
 5dc:	8f 9f       	mul	r24, r31
 5de:	c0 01       	movw	r24, r0
 5e0:	11 24       	eor	r1, r1
 5e2:	28 0f       	add	r18, r24
 5e4:	39 1f       	adc	r19, r25
 5e6:	f7 01       	movw	r30, r14
 5e8:	80 81       	ld	r24, Z
 5ea:	28 0f       	add	r18, r24
 5ec:	31 1d       	adc	r19, r1
 5ee:	f6 01       	movw	r30, r12
 5f0:	80 81       	ld	r24, Z
 5f2:	f7 2d       	mov	r31, r7
 5f4:	8f 9f       	mul	r24, r31
 5f6:	c0 01       	movw	r24, r0
 5f8:	11 24       	eor	r1, r1
 5fa:	82 0f       	add	r24, r18
 5fc:	93 1f       	adc	r25, r19
 5fe:	90 93 c8 00 	sts	0x00C8, r25
 602:	80 93 c7 00 	sts	0x00C7, r24
				  Buzzer_On;
 606:	ae 9a       	sbi	0x15, 6	; 21
 608:	8f e4       	ldi	r24, 0x4F	; 79
 60a:	93 ec       	ldi	r25, 0xC3	; 195
 60c:	01 97       	sbiw	r24, 0x01	; 1
 60e:	f1 f7       	brne	.-4      	; 0x60c <Entering_Time+0x12c>
 610:	00 c0       	rjmp	.+0      	; 0x612 <Entering_Time+0x132>
 612:	00 00       	nop
				  _delay_ms(200);
				  Buzzer_Off;
 614:	ae 98       	cbi	0x15, 6	; 21
			      GO_LOC(2,1);
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	61 e0       	ldi	r22, 0x01	; 1
 61a:	0e 94 32 01 	call	0x264	; 0x264 <GO_LOC>
		          SEND_STRING("wait  ");
 61e:	c4 01       	movw	r24, r8
 620:	0e 94 23 01 	call	0x246	; 0x246 <SEND_STRING>
		          SEND_DATE(Arr_Time[0]+48);
 624:	88 81       	ld	r24, Y
 626:	80 5d       	subi	r24, 0xD0	; 208
 628:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
				  SEND_DATE(Arr_Time[1]+48);
 62c:	f8 01       	movw	r30, r16
 62e:	80 81       	ld	r24, Z
 630:	80 5d       	subi	r24, 0xD0	; 208
 632:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
				  SEND_DATE(':');
 636:	8a e3       	ldi	r24, 0x3A	; 58
 638:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
				  SEND_DATE(Arr_Time[2]+48);
 63c:	f6 01       	movw	r30, r12
 63e:	80 81       	ld	r24, Z
 640:	80 5d       	subi	r24, 0xD0	; 208
 642:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
				  SEND_DATE(Arr_Time[3]+48);
 646:	f7 01       	movw	r30, r14
 648:	80 81       	ld	r24, Z
 64a:	80 5d       	subi	r24, 0xD0	; 208
 64c:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
				  
				  finish=0;  
 650:	10 92 b8 00 	sts	0x00B8, r1
//if(n>1)
while(finish==1)
	{
		//jump:
	// Reset_time();
		if (t<4)
 654:	90 91 c3 00 	lds	r25, 0x00C3
{
//Date=keyfind();
//if((Date != '='))
//int n=5;
//if(n>1)
while(finish==1)
 658:	80 91 b8 00 	lds	r24, 0x00B8
 65c:	81 30       	cpi	r24, 0x01	; 1
 65e:	09 f4       	brne	.+2      	; 0x662 <Entering_Time+0x182>
 660:	73 cf       	rjmp	.-282    	; 0x548 <Entering_Time+0x68>
	SEND_DATE(Arr_Time[0]+48);
	SEND_DATE(Arr_Time[1]+48);
	
}
*/
}
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	1f 91       	pop	r17
 668:	0f 91       	pop	r16
 66a:	ff 90       	pop	r15
 66c:	ef 90       	pop	r14
 66e:	df 90       	pop	r13
 670:	cf 90       	pop	r12
 672:	bf 90       	pop	r11
 674:	af 90       	pop	r10
 676:	9f 90       	pop	r9
 678:	8f 90       	pop	r8
 67a:	7f 90       	pop	r7
 67c:	6f 90       	pop	r6
 67e:	08 95       	ret

00000680 <Starting_Program>:
				}
}
void Starting_Program(void)
{ 
	
	Device_Drive();
 680:	0e 94 b9 01 	call	0x372	; 0x372 <Device_Drive>
	Start_Message();
 684:	0e 94 ed 01 	call	0x3da	; 0x3da <Start_Message>
	Entering_Time();
 688:	0e 94 70 02 	call	0x4e0	; 0x4e0 <Entering_Time>
	Timer0_Intialization();
 68c:	0e 94 14 04 	call	0x828	; 0x828 <Timer0_Intialization>
}
 690:	08 95       	ret

00000692 <Remaning_Time>:
	Arr_Time[3]=0;
	GO_LOC(1,7);
}

void Remaning_Time(void)
{
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
	      
		         Arr_Time[0]=(Num_Total_Sec/600);  
 696:	80 91 c7 00 	lds	r24, 0x00C7
 69a:	90 91 c8 00 	lds	r25, 0x00C8
 69e:	28 e5       	ldi	r18, 0x58	; 88
 6a0:	32 e0       	ldi	r19, 0x02	; 2
 6a2:	b9 01       	movw	r22, r18
 6a4:	0e 94 1a 04 	call	0x834	; 0x834 <__udivmodhi4>
 6a8:	60 93 be 00 	sts	0x00BE, r22
				 Arr_Time[1]=((Num_Total_Sec % 600)/60); 
 6ac:	80 91 c7 00 	lds	r24, 0x00C7
 6b0:	90 91 c8 00 	lds	r25, 0x00C8
 6b4:	b9 01       	movw	r22, r18
 6b6:	0e 94 1a 04 	call	0x834	; 0x834 <__udivmodhi4>
 6ba:	ec e3       	ldi	r30, 0x3C	; 60
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	bf 01       	movw	r22, r30
 6c0:	0e 94 1a 04 	call	0x834	; 0x834 <__udivmodhi4>
 6c4:	60 93 bf 00 	sts	0x00BF, r22
				 Arr_Time[2]=((((Num_Total_Sec % 600)%60)/10));  
 6c8:	80 91 c7 00 	lds	r24, 0x00C7
 6cc:	90 91 c8 00 	lds	r25, 0x00C8
 6d0:	b9 01       	movw	r22, r18
 6d2:	0e 94 1a 04 	call	0x834	; 0x834 <__udivmodhi4>
 6d6:	bf 01       	movw	r22, r30
 6d8:	0e 94 1a 04 	call	0x834	; 0x834 <__udivmodhi4>
 6dc:	ca e0       	ldi	r28, 0x0A	; 10
 6de:	d0 e0       	ldi	r29, 0x00	; 0
 6e0:	be 01       	movw	r22, r28
 6e2:	0e 94 1a 04 	call	0x834	; 0x834 <__udivmodhi4>
 6e6:	60 93 c0 00 	sts	0x00C0, r22
				 Arr_Time[3]=(((Num_Total_Sec % 600)%60)%10);
 6ea:	80 91 c7 00 	lds	r24, 0x00C7
 6ee:	90 91 c8 00 	lds	r25, 0x00C8
 6f2:	b9 01       	movw	r22, r18
 6f4:	0e 94 1a 04 	call	0x834	; 0x834 <__udivmodhi4>
 6f8:	bf 01       	movw	r22, r30
 6fa:	0e 94 1a 04 	call	0x834	; 0x834 <__udivmodhi4>
 6fe:	be 01       	movw	r22, r28
 700:	0e 94 1a 04 	call	0x834	; 0x834 <__udivmodhi4>
 704:	80 93 c1 00 	sts	0x00C1, r24
				      GO_LOC(2,7);    
 708:	82 e0       	ldi	r24, 0x02	; 2
 70a:	67 e0       	ldi	r22, 0x07	; 7
 70c:	0e 94 32 01 	call	0x264	; 0x264 <GO_LOC>
			      SEND_DATE(Arr_Time[0]+48);
 710:	80 91 be 00 	lds	r24, 0x00BE
 714:	80 5d       	subi	r24, 0xD0	; 208
 716:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
				  SEND_DATE(Arr_Time[1]+48);
 71a:	80 91 bf 00 	lds	r24, 0x00BF
 71e:	80 5d       	subi	r24, 0xD0	; 208
 720:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
				  SEND_DATE(':');
 724:	8a e3       	ldi	r24, 0x3A	; 58
 726:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
				  SEND_DATE(Arr_Time[2]+48);
 72a:	80 91 c0 00 	lds	r24, 0x00C0
 72e:	80 5d       	subi	r24, 0xD0	; 208
 730:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
				  SEND_DATE(Arr_Time[3]+48);
 734:	80 91 c1 00 	lds	r24, 0x00C1
 738:	80 5d       	subi	r24, 0xD0	; 208
 73a:	0e 94 1d 01 	call	0x23a	; 0x23a <SEND_DATE>
}
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	08 95       	ret

00000744 <MIcrowave_Finish_task>:
void MIcrowave_Finish_task(void)
{
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
	              cli();   //mask all interupt globaally
 748:	f8 94       	cli
				  TCCR0=0x00;
 74a:	13 be       	out	0x33, r1	; 51
				  flag=0;
 74c:	10 92 b9 00 	sts	0x00B9, r1
			    GO_LOC(2,1);
 750:	82 e0       	ldi	r24, 0x02	; 2
 752:	61 e0       	ldi	r22, 0x01	; 1
 754:	0e 94 32 01 	call	0x264	; 0x264 <GO_LOC>
			    SEND_STRING("      ");	   
 758:	81 ea       	ldi	r24, 0xA1	; 161
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 23 01 	call	0x246	; 0x246 <SEND_STRING>
		       SEND_STRING("00:00 ");
 760:	88 ea       	ldi	r24, 0xA8	; 168
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 23 01 	call	0x246	; 0x246 <SEND_STRING>
				 Stop_Output();
 768:	0e 94 c5 01 	call	0x38a	; 0x38a <Stop_Output>
				  Buzzer_On;
 76c:	ae 9a       	sbi	0x15, 6	; 21
 76e:	8f e5       	ldi	r24, 0x5F	; 95
 770:	9a ee       	ldi	r25, 0xEA	; 234
 772:	a0 e0       	ldi	r26, 0x00	; 0
 774:	81 50       	subi	r24, 0x01	; 1
 776:	90 40       	sbci	r25, 0x00	; 0
 778:	a0 40       	sbci	r26, 0x00	; 0
 77a:	e1 f7       	brne	.-8      	; 0x774 <MIcrowave_Finish_task+0x30>
 77c:	00 c0       	rjmp	.+0      	; 0x77e <MIcrowave_Finish_task+0x3a>
 77e:	00 00       	nop
				  _delay_ms(300);
				  Buzzer_Off;
 780:	ae 98       	cbi	0x15, 6	; 21
				  SEND_COMND(0x01);
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SEND_COMND>
               	GO_LOC(3,1);
 788:	83 e0       	ldi	r24, 0x03	; 3
 78a:	61 e0       	ldi	r22, 0x01	; 1
 78c:	0e 94 32 01 	call	0x264	; 0x264 <GO_LOC>
			    SEND_STRING("welldone");
 790:	8f ea       	ldi	r24, 0xAF	; 175
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 23 01 	call	0x246	; 0x246 <SEND_STRING>
 798:	c6 e0       	ldi	r28, 0x06	; 6
 79a:	d0 e0       	ldi	r29, 0x00	; 0
					for (int j=0;j<=5;j++)
               	{
		          SEND_COMND(0x1C);
 79c:	8c e1       	ldi	r24, 0x1C	; 28
 79e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SEND_COMND>
 7a2:	ab e4       	ldi	r26, 0x4B	; 75
 7a4:	bd e1       	ldi	r27, 0x1D	; 29
 7a6:	11 97       	sbiw	r26, 0x01	; 1
 7a8:	f1 f7       	brne	.-4      	; 0x7a6 <MIcrowave_Finish_task+0x62>
 7aa:	00 c0       	rjmp	.+0      	; 0x7ac <MIcrowave_Finish_task+0x68>
 7ac:	00 00       	nop
 7ae:	21 97       	sbiw	r28, 0x01	; 1
				  _delay_ms(300);
				  Buzzer_Off;
				  SEND_COMND(0x01);
               	GO_LOC(3,1);
			    SEND_STRING("welldone");
					for (int j=0;j<=5;j++)
 7b0:	a9 f7       	brne	.-22     	; 0x79c <MIcrowave_Finish_task+0x58>
               	{
		          SEND_COMND(0x1C);
	             	_delay_ms(30); 
             	}
				
}
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	08 95       	ret

000007b8 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 7b8:	1f 92       	push	r1
 7ba:	0f 92       	push	r0
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	0f 92       	push	r0
 7c0:	11 24       	eor	r1, r1
 7c2:	2f 93       	push	r18
 7c4:	3f 93       	push	r19
 7c6:	4f 93       	push	r20
 7c8:	5f 93       	push	r21
 7ca:	6f 93       	push	r22
 7cc:	7f 93       	push	r23
 7ce:	8f 93       	push	r24
 7d0:	9f 93       	push	r25
 7d2:	af 93       	push	r26
 7d4:	bf 93       	push	r27
 7d6:	ef 93       	push	r30
 7d8:	ff 93       	push	r31
	TCNT0=165;
 7da:	85 ea       	ldi	r24, 0xA5	; 165
 7dc:	82 bf       	out	0x32, r24	; 50
     Num_Total_Sec--;
 7de:	80 91 c7 00 	lds	r24, 0x00C7
 7e2:	90 91 c8 00 	lds	r25, 0x00C8
 7e6:	01 97       	sbiw	r24, 0x01	; 1
 7e8:	90 93 c8 00 	sts	0x00C8, r25
 7ec:	80 93 c7 00 	sts	0x00C7, r24
	if (Num_Total_Sec !=0)
 7f0:	80 91 c7 00 	lds	r24, 0x00C7
 7f4:	90 91 c8 00 	lds	r25, 0x00C8
 7f8:	00 97       	sbiw	r24, 0x00	; 0
 7fa:	19 f0       	breq	.+6      	; 0x802 <__vector_11+0x4a>
	{
		 Remaning_Time();
 7fc:	0e 94 49 03 	call	0x692	; 0x692 <Remaning_Time>
 800:	02 c0       	rjmp	.+4      	; 0x806 <__vector_11+0x4e>
	}
	else
	{
		MIcrowave_Finish_task();
 802:	0e 94 a2 03 	call	0x744	; 0x744 <MIcrowave_Finish_task>
	}
	
 806:	ff 91       	pop	r31
 808:	ef 91       	pop	r30
 80a:	bf 91       	pop	r27
 80c:	af 91       	pop	r26
 80e:	9f 91       	pop	r25
 810:	8f 91       	pop	r24
 812:	7f 91       	pop	r23
 814:	6f 91       	pop	r22
 816:	5f 91       	pop	r21
 818:	4f 91       	pop	r20
 81a:	3f 91       	pop	r19
 81c:	2f 91       	pop	r18
 81e:	0f 90       	pop	r0
 820:	0f be       	out	0x3f, r0	; 63
 822:	0f 90       	pop	r0
 824:	1f 90       	pop	r1
 826:	18 95       	reti

00000828 <Timer0_Intialization>:
 */ 
#include "TIMER0.h"

void Timer0_Intialization(void)
{
	sei();
 828:	78 94       	sei
	TCNT0=156;
 82a:	8c e9       	ldi	r24, 0x9C	; 156
 82c:	82 bf       	out	0x32, r24	; 50
	TCCR0=0x01;
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	83 bf       	out	0x33, r24	; 51
//	TIMSK |=(1<<TOIE0);
 832:	08 95       	ret

00000834 <__udivmodhi4>:
 834:	aa 1b       	sub	r26, r26
 836:	bb 1b       	sub	r27, r27
 838:	51 e1       	ldi	r21, 0x11	; 17
 83a:	07 c0       	rjmp	.+14     	; 0x84a <__udivmodhi4_ep>

0000083c <__udivmodhi4_loop>:
 83c:	aa 1f       	adc	r26, r26
 83e:	bb 1f       	adc	r27, r27
 840:	a6 17       	cp	r26, r22
 842:	b7 07       	cpc	r27, r23
 844:	10 f0       	brcs	.+4      	; 0x84a <__udivmodhi4_ep>
 846:	a6 1b       	sub	r26, r22
 848:	b7 0b       	sbc	r27, r23

0000084a <__udivmodhi4_ep>:
 84a:	88 1f       	adc	r24, r24
 84c:	99 1f       	adc	r25, r25
 84e:	5a 95       	dec	r21
 850:	a9 f7       	brne	.-22     	; 0x83c <__udivmodhi4_loop>
 852:	80 95       	com	r24
 854:	90 95       	com	r25
 856:	bc 01       	movw	r22, r24
 858:	cd 01       	movw	r24, r26
 85a:	08 95       	ret

0000085c <itoa>:
 85c:	fb 01       	movw	r30, r22
 85e:	9f 01       	movw	r18, r30
 860:	e8 94       	clt
 862:	42 30       	cpi	r20, 0x02	; 2
 864:	c4 f0       	brlt	.+48     	; 0x896 <__stack+0x37>
 866:	45 32       	cpi	r20, 0x25	; 37
 868:	b4 f4       	brge	.+44     	; 0x896 <__stack+0x37>
 86a:	4a 30       	cpi	r20, 0x0A	; 10
 86c:	29 f4       	brne	.+10     	; 0x878 <__stack+0x19>
 86e:	97 fb       	bst	r25, 7
 870:	1e f4       	brtc	.+6      	; 0x878 <__stack+0x19>
 872:	90 95       	com	r25
 874:	81 95       	neg	r24
 876:	9f 4f       	sbci	r25, 0xFF	; 255
 878:	64 2f       	mov	r22, r20
 87a:	77 27       	eor	r23, r23
 87c:	0e 94 1a 04 	call	0x834	; 0x834 <__udivmodhi4>
 880:	80 5d       	subi	r24, 0xD0	; 208
 882:	8a 33       	cpi	r24, 0x3A	; 58
 884:	0c f0       	brlt	.+2      	; 0x888 <__stack+0x29>
 886:	89 5d       	subi	r24, 0xD9	; 217
 888:	81 93       	st	Z+, r24
 88a:	cb 01       	movw	r24, r22
 88c:	00 97       	sbiw	r24, 0x00	; 0
 88e:	a1 f7       	brne	.-24     	; 0x878 <__stack+0x19>
 890:	16 f4       	brtc	.+4      	; 0x896 <__stack+0x37>
 892:	5d e2       	ldi	r21, 0x2D	; 45
 894:	51 93       	st	Z+, r21
 896:	10 82       	st	Z, r1
 898:	c9 01       	movw	r24, r18
 89a:	0c 94 4f 04 	jmp	0x89e	; 0x89e <strrev>

0000089e <strrev>:
 89e:	dc 01       	movw	r26, r24
 8a0:	fc 01       	movw	r30, r24
 8a2:	67 2f       	mov	r22, r23
 8a4:	71 91       	ld	r23, Z+
 8a6:	77 23       	and	r23, r23
 8a8:	e1 f7       	brne	.-8      	; 0x8a2 <strrev+0x4>
 8aa:	32 97       	sbiw	r30, 0x02	; 2
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <strrev+0x18>
 8ae:	7c 91       	ld	r23, X
 8b0:	6d 93       	st	X+, r22
 8b2:	70 83       	st	Z, r23
 8b4:	62 91       	ld	r22, -Z
 8b6:	ae 17       	cp	r26, r30
 8b8:	bf 07       	cpc	r27, r31
 8ba:	c8 f3       	brcs	.-14     	; 0x8ae <strrev+0x10>
 8bc:	08 95       	ret

000008be <_exit>:
 8be:	f8 94       	cli

000008c0 <__stop_program>:
 8c0:	ff cf       	rjmp	.-2      	; 0x8c0 <__stop_program>
